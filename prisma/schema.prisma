// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core User Model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?   // For email/password authentication
  image         String?
  bio           String?   @db.Text
  phone         String?
  location      String?
  latitude      Float?
  longitude     Float?
  radiusKm      Int       @default(10) // Search radius preference
  verified      Boolean   @default(false) // Account verification status
  
  // Reputation
  rating        Float     @default(0)
  totalReviews  Int       @default(0)
  credlyBadgeUrl String?  // Digital badge verification
  
  // Token/Credit System
  credits       Int       @default(0)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  skills        Skill[]
  skillRequests SkillRequest[]
  bookingsAsProvider Booking[] @relation("ProviderBookings")
  bookingsAsRequester Booking[] @relation("RequesterBookings")
  reviewsGiven  Review[]  @relation("ReviewsGiven")
  reviewsReceived Review[] @relation("ReviewsReceived")
  endorsements  Endorsement[]
  projectsCreated Project[] @relation("ProjectCreator")
  projectMembers ProjectMember[]
  transactions  Transaction[]
  notifications Notification[]

  @@index([email])
  @@index([latitude, longitude])
}

// Skills offered by users
model Skill {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String   @db.Text
  category    String   // e.g., "Digital Skills", "Crafts", "Tutoring", "Fitness", "Language"
  level       String   // e.g., "Beginner", "Intermediate", "Expert"
  hourlyRate  Float?   // Optional pricing
  available   Boolean  @default(true)
  tags        String[] // Array of skill tags
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  endorsements Endorsement[]

  @@index([userId])
  @@index([category])
}

// Learning requests/needs
model SkillRequest {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String   @db.Text
  category    String
  budget      Float?
  urgent      Boolean  @default(false)
  status      String   @default("open") // "open", "matched", "completed", "closed"
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
  @@index([status])
}

// Booking and Scheduling
model Booking {
  id          String   @id @default(cuid())
  providerId  String   // User providing the skill
  requesterId String   // User requesting the skill
  skillId     String
  
  startTime   DateTime
  endTime     DateTime
  status      String   @default("pending") // "pending", "confirmed", "completed", "cancelled"
  location    String?  // Physical location or "online"
  notes       String?  @db.Text
  
  // Reminders
  reminderSent Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  provider    User     @relation("ProviderBookings", fields: [providerId], references: [id], onDelete: Cascade)
  requester   User     @relation("RequesterBookings", fields: [requesterId], references: [id], onDelete: Cascade)
  skill       Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  review      Review?

  @@index([providerId])
  @@index([requesterId])
  @@index([skillId])
  @@index([startTime])
}

// Reviews and Ratings
model Review {
  id          String   @id @default(cuid())
  bookingId   String   @unique
  reviewerId  String   // Person giving the review
  revieweeId  String   // Person being reviewed
  
  rating      Int      // 1-5 stars
  comment     String?  @db.Text
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  reviewer    User     @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee    User     @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade)

  @@index([reviewerId])
  @@index([revieweeId])
}

// Skill Endorsements
model Endorsement {
  id          String   @id @default(cuid())
  skillId     String
  endorserId  String   // User giving endorsement
  
  createdAt   DateTime @default(now())

  skill       Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  endorser    User     @relation(fields: [endorserId], references: [id], onDelete: Cascade)

  @@unique([skillId, endorserId])
  @@index([skillId])
  @@index([endorserId])
}

// Community Projects
model Project {
  id          String   @id @default(cuid())
  creatorId   String
  title       String
  description String   @db.Text
  category    String
  status      String   @default("open") // "open", "in-progress", "completed", "cancelled"
  location    String?
  latitude    Float?
  longitude   Float?
  maxMembers  Int?
  
  startDate   DateTime?
  endDate     DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator     User     @relation("ProjectCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  members     ProjectMember[]

  @@index([creatorId])
  @@index([status])
  @@index([category])
}

// Project Membership
model ProjectMember {
  id          String   @id @default(cuid())
  projectId   String
  userId      String
  role        String   @default("member") // "member", "coordinator"
  status      String   @default("pending") // "pending", "accepted", "rejected"
  
  joinedAt    DateTime @default(now())

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

// Credit/Token System Transactions
model Transaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int      // Can be positive (earned) or negative (spent)
  type        String   // "earned", "spent", "donated", "bonus"
  description String
  relatedId   String?  // Related booking/project ID
  
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

// Notifications
model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "booking", "review", "project", "reminder", "system"
  title       String
  message     String   @db.Text
  read        Boolean  @default(false)
  link        String?  // Link to relevant page
  
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}
