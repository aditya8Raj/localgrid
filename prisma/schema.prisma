// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core User Model
model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?   // Avatar URL
  avatarUrl     String?   // Alternative avatar field
  bio           String?
  locationLat   Float?
  locationLng   Float?
  locationCity  String?
  passwordHash  String?   // Used if email/password signup
  role          UserRole  @default(USER)
  userType      UserType  @default(SKILL_PROVIDER) // Primary role: Provider or Creator
  credits       Int       @default(0)
  isVerified    Boolean   @default(false) // Admin verification status
  verifiedAt    DateTime?

  accounts      Account[]
  sessions      Session[]
  listings      Listing[]
  bookings      Booking[]
  reviewsGiven   Review[] @relation("reviewsGiven")
  reviewsReceived Review[] @relation("reviewsReceived")
  badges        VerificationBadge[]
  endorsementsGiven  Endorsement[] @relation("endorser")
  endorsementsReceived Endorsement[] @relation("endorsed")
  projectsOwned CommunityProject[] @relation("owner")
  projectMemberships ProjectMember[]
  transactions  CreditTransaction[]

  @@index([email])
  @@index([locationLat, locationLng])
  @@index([userType])
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum UserType {
  SKILL_PROVIDER    // People offering skills/services
  PROJECT_CREATOR   // People posting projects and hiring
}

// Listings (Skills offered by users)
model Listing {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  skillTags   String[]  // e.g., ["guitar", "spanish"]
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  lat         Float
  lng         Float
  priceCents  Int?     // optional price, or 0 for barter/credit-based
  durationMins Int
  isActive    Boolean  @default(true)
  reviews     Review[]
  bookings    Booking[]

  @@index([ownerId])
  @@index([lat, lng])
  @@index([isActive])
}

// Booking and Scheduling
model Booking {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  listing       Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId     String
  startAt       DateTime
  endAt         DateTime
  status        BookingStatus @default(PENDING)
  priceCents    Int?
  creditsUsed   Int?
  reminderSent  Boolean @default(false)

  @@index([userId])
  @@index([listingId])
  @@index([startAt])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  DECLINED
}

// Reviews and Ratings
model Review {
  id         String   @id @default(cuid())
  rating     Int      // 1-5
  comment    String?
  createdAt  DateTime @default(now())
  reviewer   User     @relation("reviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewerId String
  subject    User     @relation("reviewsReceived", fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId  String
  listing    Listing? @relation(fields: [listingId], references: [id])
  listingId  String?

  @@index([reviewerId])
  @@index([subjectId])
}

// Skill Endorsements
model Endorsement {
  id        String   @id @default(cuid())
  from      User     @relation("endorser", fields: [fromId], references: [id], onDelete: Cascade)
  fromId    String
  to        User     @relation("endorsed", fields: [toId], references: [id], onDelete: Cascade)
  toId      String
  skill     String
  createdAt DateTime @default(now())

  @@index([fromId])
  @@index([toId])
}

// Verification Badges
model VerificationBadge {
  id       String   @id @default(cuid())
  provider String   // e.g., "credly"
  badgeId  String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  issuedAt DateTime @default(now())

  @@index([userId])
}

// Community Projects
model CommunityProject {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  title       String
  description String
  owner       User     @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  members     ProjectMember[]
  status      ProjectStatus @default(ACTIVE)

  @@index([ownerId])
}

model ProjectMember {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   CommunityProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  role      ProjectRole @default(MEMBER)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum ProjectRole {
  MEMBER
  MANAGER
}

// Credit/Token System Transactions
model CreditTransaction {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  amount    Int      // positive or negative
  reason    String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

// Admin Activity Logs
model AdminLog {
  id        String   @id @default(cuid())
  adminEmail String  // Admin who performed the action
  action    String   // e.g., "VERIFY_USER", "APPROVE_BADGE", "BAN_USER"
  targetType String  // e.g., "USER", "LISTING", "PROJECT"
  targetId  String   // ID of the affected entity
  details   String?  // JSON or text details
  createdAt DateTime @default(now())

  @@index([adminEmail])
  @@index([createdAt])
  @@index([targetId])
}

// Report System (for users to report issues)
model Report {
  id          String   @id @default(cuid())
  reporterEmail String // Email of the reporter
  reportType  ReportType
  targetType  String   // "USER", "LISTING", "PROJECT"
  targetId    String
  reason      String
  description String?
  status      ReportStatus @default(PENDING)
  resolvedBy  String?  // Admin email who resolved it
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())

  @@index([reporterEmail])
  @@index([status])
  @@index([createdAt])
}

enum ReportType {
  SPAM
  INAPPROPRIATE
  SCAM
  HARASSMENT
  OTHER
}

enum ReportStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  DISMISSED
}
