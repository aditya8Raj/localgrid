generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================
// USER & AUTHENTICATION MODELS
// ============================================

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Authentication
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  passwordHash  String?   // For credentials login
  
  // Role System (PRIMARY FEATURE)
  userType      UserType?  // No default - user must choose role after signup
  role          UserRole  @default(USER)
  isVerified    Boolean   @default(false)
  verifiedAt    DateTime?
  
  // Location (for geo-search)
  locationLat   Float?
  locationLng   Float?
  locationCity  String?
  
  // Profile
  bio           String?
  credits       Int       @default(0)
  
  // Relations
  listings      Listing[]
  bookings      Booking[]
  reviewsGiven  Review[]  @relation("reviewsGiven")
  reviewsReceived Review[] @relation("reviewsReceived")
  badges        VerificationBadge[]
  endorsementsGiven  Endorsement[] @relation("endorser")
  endorsementsReceived Endorsement[] @relation("endorsed")
  projectsOwned CommunityProject[] @relation("owner")
  projectMemberships ProjectMember[]
  creditTransactions CreditTransaction[]
  reportsCreated Report[] @relation("reporter")
  reportsReceived Report[] @relation("reported")
  adminLogs     AdminLog[]
  
  @@index([userType])
  @@index([email])
  @@index([locationLat, locationLng])
}

enum UserType {
  SKILL_PROVIDER
  PROJECT_CREATOR
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

// ============================================
// LISTING & BOOKING MODELS
// ============================================

model Listing {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Basic Info
  title       String
  description String   @db.Text
  skillTags   String[] // e.g., ["guitar", "spanish", "web-development"]
  
  // Geo-location for radius search
  lat         Float
  lng         Float
  
  // Pricing & Duration
  priceCents  Int?     // Price in paise (INR), null for barter/credit-only
  durationMins Int
  isActive    Boolean  @default(true)
  
  // Relations
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  bookings    Booking[]
  reviews     Review[]
  
  @@index([ownerId])
  @@index([lat, lng])
  @@index([isActive])
  @@index([skillTags])
}

model Booking {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Schedule
  startAt       DateTime
  endAt         DateTime
  
  // Status
  status        BookingStatus @default(PENDING)
  
  // Payment
  priceCents    Int?
  creditsUsed   Int?
  
  // Reminder system
  reminderSent  Boolean @default(false)
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  listing       Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId     String
  
  @@index([userId])
  @@index([listingId])
  @@index([status])
  @@index([startAt, endAt])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  DECLINED
}

// ============================================
// REVIEW & REPUTATION MODELS
// ============================================

model Review {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  
  // Rating & Comment
  rating     Int      // 1-5
  comment    String?  @db.Text
  
  // Relations
  reviewer   User     @relation("reviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewerId String
  subject    User     @relation("reviewsReceived", fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId  String
  listing    Listing? @relation(fields: [listingId], references: [id], onDelete: SetNull)
  listingId  String?
  
  @@index([reviewerId])
  @@index([subjectId])
  @@index([listingId])
}

model Endorsement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Skill being endorsed
  skill     String
  
  // Relations
  from      User     @relation("endorser", fields: [fromId], references: [id], onDelete: Cascade)
  fromId    String
  to        User     @relation("endorsed", fields: [toId], references: [id], onDelete: Cascade)
  toId      String
  
  @@unique([fromId, toId, skill])
  @@index([toId])
  @@index([fromId])
}

model VerificationBadge {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  issuedAt  DateTime @default(now())
  
  // Badge Info
  provider  String   // e.g., "credly", "coursera"
  badgeId   String
  badgeName String?
  badgeUrl  String?
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  @@index([userId])
}

// ============================================
// COMMUNITY PROJECTS
// ============================================

model CommunityProject {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Project Info
  title       String
  description String        @db.Text
  status      ProjectStatus @default(ACTIVE)
  
  // Relations
  owner       User          @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  members     ProjectMember[]
  
  @@index([ownerId])
  @@index([status])
}

model ProjectMember {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  
  // Member role in project
  role      ProjectRole @default(MEMBER)
  
  // Relations
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   CommunityProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  
  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum ProjectRole {
  MEMBER
  MANAGER
}

// ============================================
// CREDITS & TRANSACTIONS
// ============================================

model CreditTransaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Transaction details
  amount    Int      // Positive or negative
  reason    String?
  
  // Payment details (if applicable)
  razorpayOrderId   String?
  razorpayPaymentId String?
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  @@index([userId])
  @@index([createdAt])
}

// ============================================
// MODERATION & ADMIN
// ============================================

model Report {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  
  // Report details
  reason     String
  description String?     @db.Text
  status     ReportStatus @default(PENDING)
  
  // Relations
  reporter   User         @relation("reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId String
  reported   User         @relation("reported", fields: [reportedId], references: [id], onDelete: Cascade)
  reportedId String
  
  @@index([reporterId])
  @@index([reportedId])
  @@index([status])
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

model AdminLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Action details
  action    String
  details   String?  @db.Text
  
  // Relations
  admin     User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId   String
  
  @@index([adminId])
  @@index([createdAt])
}
